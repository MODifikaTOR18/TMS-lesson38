@Library(['build', 'general', 'deploy']) _

pipeline {
    agent any

    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
        disableConcurrentBuilds()
        timestamps()
        ansiColor('xterm')
    }

    environment {
        SERVICES_FILE = 'simple-java-project/apps/services.json'
        GIT_REPO_OWNER = 'MODifikaTOR18'
        GIT_REPO_NAME = 'TMS-lesson38'
        DOCKER_REGISTRY = "ghcr.io/${GIT_REPO_OWNER.toLowerCase()}"
    }

    stages {
        stage ('Pull image') {
            
        }
        stage ('Push image') {
            when { expression { BRANCH_NAME == 'master'}} //|| BRANCH_NAME ==~ "PR-"+/\d+/ } }
            steps {
                script {
                    log.info("Beginning to push images to GitHub...")
                    log.info("Tag added to images: ${env.TAG}")
                    pushedApps = []
                    withCredentials([usernamePassword(credentialsId: 'GitHub_ID', passwordVariable: 'pass', usernameVariable: 'user')]) {
                        sh "echo ${pass} | docker login ${DOCKER_REGISTRY} -u ${user} --password-stdin"
                        log.info("Successfully logged in.")
                    }
                    builtApps.each { app, path ->
                        sh "docker push ${DOCKER_REGISTRY}/${app}:${TAG}"
                        pushedApps.add(app)
                        log.info("Successfully pushed docker image ${app} to Docker registry.")
                    }
                    log.info("Images were pushed to GitHub!")
                }
            }
        }

        stage ('Deploy') {
            steps {
                script {
                    log.info("Running images from list ${pushedApps} with tag ${env.TAG}")
                    try {
                        runStages = stageDeploy(pushedApps)
                        runStages.each { stage ->
                            parallel stage
                        }
                        log.info("Images started!")
                    }
                    catch (Exception e) {
                        Error("Error running images! ${e}")
                    }
                }
                
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}